测试tensorrt

python -m venv GENIE_ENV
python -m pip install --upgrade pip
pip install -r requirements.txt
pip install pyinstaller

Installing collected packages: pyaudio, mpmath, flatbuffers, typing_extensions, sympy, pyyaml, pyreadline3, pygments, pycparser, protobuf, packaging, numpy, mdurl, colorama, tqdm, soxr, onnx, markdown-it-py, humanfriendly, cffi, soundfile, rich, pyopenjtalk, coloredlogs, onnxruntime-gpu




/load irene "C:\Users\Haruka\Desktop\Midori\Dockers\mnt\Midori\GPT_SoVITS\onnx\irene"
/prompt "C:/Users/Haruka/Desktop/Midori/Dockers/mnt/Midori/WAV/irene_wav/2616341.wav" "殺し合いなどせずとも、争いを解決できる方法はきっとあります。"
/say --play  お兄ちゃんのバカ！勝手にいなくなって…心配したんだからねっ！べ、別に…泣いてなんかないしっ！
/say --play  "こんにちは、世界。"
/say -o 0.wav --play  月が雲に隠れた瞬間、世界は少しだけ優しくなった気がした。

python "C:\Users\Haruka\Desktop\Midori\Source\Modules\TTS\GSV_Local\Inference_Simple.py"

pyinstaller --name GENIE_CPU_RUNTIME --icon="GENIE.ico" Main.py

pyinstaller `
  --name GENIE_WIN64_CUDA `
  --icon="GENIE.ico" `
  --add-binary "C:\Program Files\NVIDIA\CUDNN\v9.11\bin\12.9\cudnn64_9.dll;." `
  --add-binary "C:\Program Files\NVIDIA\CUDNN\v9.11\bin\12.9\cudnn_graph64_9.dll;." `
  Main.py

大小变化记录：
onnxruntime-gpu
numpy
pyopenjtalk
此时：488MB（大小而不是磁盘大小）
soundfile
soxr
simpleaudio
此时：495MB
用了一段时间后：541MB


进行干净的测试
$env:PATH = "$env:SystemRoot\system32;$env:SystemRoot;$env:SystemRoot\System32\Wbem"
cd C:\Users\Haruka\Desktop\GENIE_WIN64_CUDA
& "C:\Users\Haruka\Desktop\GENIE_WIN64_CUDA\GENIE_WIN64_CUDA.exe"
在打包后文件夹里发现
cublasLt64_12.dll 600MB（确认需要）
cufft64_11.dll 263MB（确认需要）
nvinfer_10.dll 450MB（tensorRT，确认不需要）
nvinfer_plugin_10.dll（tensorRT，确认不需要）
onnxruntime 338MB
cublas64_12.dll 108MB （确认需要）

GENIE-CPU Release
GENIE-GPU Release（包含预训练模型、CUDA Toolkit）
GSV官方整合包压缩包 8.2GB




这是一个 TTS 库
./G2P 含多个程序，处理日文文本转音素
Audio.py 负责读取、预处理（如正则化、重采样）音频的类
Command.py 负责解析指令并调用其他模块来完成指令的类
Config.py 管理 Config 的类
Constants.py  存储常量
ConvertFP16.py 负责将 FP16 模型转换为 FP32 的类
Inference.py 包含核心的模型推理逻辑的类
Models.py 负责读取、缓存模型的类
InputManager.py 负责处理输入，将输入放到任务队列并调度Inference.py等文件的函数完成任务
OutputManager.py 负责处理InputManager提供的输出，根据用户的设置，可能会：直接播放、写入文件、FastAPI流式传输等等
ReferenceAudio.py 处理并缓存参考音频的类 
Utils.py 一些小型工具函数